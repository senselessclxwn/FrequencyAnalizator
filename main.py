import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
plt.rcParams['font.size'] = 12
sns.set_style("whitegrid")

# –ê–ª—Ñ–∞–≤–∏—Ç—ã
RUS_ALPHABET = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
ENG_ALPHABET = 'abcdefghijklmnopqrstuvwxyz'

class SimpleTextAnalyzer:
    def clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã"""
        text = text.lower()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        rus_count = sum(1 for c in text if c in RUS_ALPHABET)
        eng_count = sum(1 for c in text if c in ENG_ALPHABET)
        
        alphabet = RUS_ALPHABET if rus_count > eng_count else ENG_ALPHABET
        cleaned = ''.join(c for c in text if c in alphabet)
        return cleaned, alphabet
    
    def analyze(self, text):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text, alphabet = self.clean_text(text)
        n = len(alphabet)
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±—É–∫–≤
        counts = Counter(text)
        total = len(text)
        probs = [counts.get(char, 0) / total for char in alphabet]
        
        # –ë–∏–≥—Ä–∞–º–º—ã
        bigram_counts = np.zeros((n, n))
        for i in range(len(text)-1):
            idx1 = alphabet.find(text[i])
            idx2 = alphabet.find(text[i+1])
            if idx1 != -1 and idx2 != -1:
                bigram_counts[idx1, idx2] += 1
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–∏–≥—Ä–∞–º–º
        bigram_total = np.sum(bigram_counts)
        bigram_probs = bigram_counts / bigram_total if bigram_total > 0 else np.zeros((n, n))
        
        # –≠–Ω—Ç—Ä–æ–ø–∏—è
        entropy = sum(-p * math.log2(p) for p in probs if p > 0)
        
        return {
            'alphabet': alphabet,
            'probs': probs,
            'bigram_probs': bigram_probs,
            'entropy': entropy,
            'length': len(text)
        }

def create_beautiful_plots(result, title):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã"""
    
    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —á–∞—Å—Ç–æ—Ç –±—É–∫–≤
    plt.figure(figsize=(15, 10))
    
    plt.subplot(2, 2, 1)
    colors = plt.cm.viridis(np.linspace(0, 1, len(result['alphabet'])))
    bars = plt.bar(range(len(result['alphabet'])), result['probs'], color=colors)
    plt.title(f'–ß–∞—Å—Ç–æ—Ç—ã –±—É–∫–≤: {title}\n–≠–Ω—Ç—Ä–æ–ø–∏—è: {result["entropy"]:.2f} –±–∏—Ç/—Å–∏–º–≤–æ–ª', fontsize=14)
    plt.xlabel('–ë—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞')
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –±—É–∫–≤—É
    for i, (bar, char) in enumerate(zip(bars, result['alphabet'])):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                f'{char}', ha='center', va='bottom', rotation=45)
    
    # 2. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±–∏–≥—Ä–∞–º–º
    plt.subplot(2, 2, 2)
    sns.heatmap(result['bigram_probs'], 
                xticklabels=list(result['alphabet']),
                yticklabels=list(result['alphabet']),
                cmap='YlOrRd', annot=False)
    plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±–∏–≥—Ä–∞–º–º', fontsize=14)
    plt.xlabel('–í—Ç–æ—Ä–∞—è –±—É–∫–≤–∞')
    plt.ylabel('–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞')
    
    # 3. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –±—É–∫–≤
    plt.subplot(2, 2, 3)
    # –ë–µ—Ä–µ–º —Ç–æ–ø-10 –±—É–∫–≤
    indices = np.argsort(result['probs'])[-10:][::-1]
    top_letters = [result['alphabet'][i] for i in indices]
    top_probs = [result['probs'][i] for i in indices]
    
    plt.pie(top_probs, labels=top_letters, autopct='%1.1f%%', startangle=90)
    plt.title('–¢–æ–ø-10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –±—É–∫–≤', fontsize=14)
    
    # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    plt.subplot(2, 2, 4)
    uniform_probs = [1/len(result['alphabet'])] * len(result['alphabet'])
    
    x = range(len(result['alphabet']))
    width = 0.35
    plt.bar([i - width/2 for i in x], result['probs'], width, label='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ', alpha=0.7)
    plt.bar([i + width/2 for i in x], uniform_probs, width, label='–†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ', alpha=0.7)
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º', fontsize=14)
    plt.xlabel('–ë—É–∫–≤—ã')
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    plt.legend()
    
    plt.tight_layout()
    plt.show()

def compare_texts(results, titles):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–π
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 2, 1)
    entropies = [result['entropy'] for result in results]
    max_entropy = [math.log2(len(result['alphabet'])) for result in results]
    
    x = range(len(titles))
    plt.bar(x, entropies, alpha=0.7, label='–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è')
    plt.bar(x, max_entropy, alpha=0.3, label='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è')
    plt.xticks(x, titles, rotation=45)
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–π —Ç–µ–∫—Å—Ç–æ–≤', fontsize=14)
    plt.ylabel('–ë–∏—Ç—ã –Ω–∞ —Å–∏–º–≤–æ–ª')
    plt.legend()
    
    # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)
    plt.subplot(2, 2, 2)
    efficiencies = [entropies[i] / max_entropy[i] for i in range(len(entropies))]
    plt.bar(titles, efficiencies, color='lightgreen')
    plt.xticks(rotation=45)
    plt.title('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–ª—Ñ–∞–≤–∏—Ç–∞', fontsize=14)
    plt.ylabel('–î–æ–ª—è –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–∏')
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç –±—É–∫–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    plt.subplot(2, 1, 2)
    for i, result in enumerate(results):
        plt.plot(result['probs'], label=titles[i], linewidth=2)
    
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —á–∞—Å—Ç–æ—Ç –±—É–∫–≤', fontsize=14)
    plt.xlabel('–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –±—É–∫–≤—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ')
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

# –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
texts = {
    '–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': '''
    –í–æ–π–Ω–∞ –∏ –º–∏—Ä - –≤–µ–ª–∏–∫–∏–π —Ä–æ–º–∞–Ω –¢–æ–ª—Å—Ç–æ–≥–æ –æ —Å—É–¥—å–±–∞—Ö –ª—é–¥–µ–π –≤–æ –≤—Ä–µ–º—è –≤–æ–π–Ω—ã —Å –ù–∞–ø–æ–ª–µ–æ–Ω–æ–º.
    –ì–µ—Ä–æ–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∏—Å–ø—ã—Ç–∞–Ω–∏—è, –ª—é–±–æ–≤—å –∏ –ø–æ—Ç–µ—Ä–∏, —Ä–∞—Å–∫—Ä—ã–≤–∞—è –≥–ª—É–±–∏–Ω—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –¥—É—à–∏.
    ''' * 10,
    
    '–†—É—Å—Å–∫–∞—è –Ω–∞—É–∫–∞': '''
    –ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ –∏–∑—É—á–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –Ω–∞ –∞—Ç–æ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ. 
    –í–æ–ª–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—é –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞.
    ''' * 10,
    
    '–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': '''
    It was the best of times, it was the worst of times. The story of great expectations
    and dramatic turns of fate that shape the lives of characters in Victorian England.
    ''' * 10,
    
    '–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –Ω–∞—É–∫–∞': '''
    Machine learning algorithms improve through experience. Deep learning uses neural
    networks to extract patterns from large datasets for artificial intelligence applications.
    ''' * 10
}

def main():
    analyzer = SimpleTextAnalyzer()
    results = []
    titles = []
    
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–ö–°–¢–û–í - –ö–†–ê–°–ò–í–ê–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç
    for title, text in texts.items():
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {title}")
        result = analyzer.analyze(text)
        results.append(result)
        titles.append(title)
        
        print(f"   –ê–ª—Ñ–∞–≤–∏—Ç: {'—Ä—É—Å—Å–∫–∏–π' if len(result['alphabet']) == 32 else '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'}")
        print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {result['length']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –≠–Ω—Ç—Ä–æ–ø–∏—è: {result['entropy']:.3f} –±–∏—Ç/—Å–∏–º–≤–æ–ª")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è: {math.log2(len(result['alphabet'])):.3f} –±–∏—Ç/—Å–∏–º–≤–æ–ª")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        create_beautiful_plots(result, title)
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
    print("üìà –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –¢–ï–ö–°–¢–û–í")
    compare_texts(results, titles)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("–ò–¢–û–ì–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*60)
    print(f"{'–¢–µ–∫—Å—Ç':<20} {'–Ø–∑—ã–∫':<10} {'–≠–Ω—Ç—Ä–æ–ø–∏—è':<10} {'–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å':<15}")
    print("-" * 60)
    
    for i, (title, result) in enumerate(zip(titles, results)):
        max_entropy = math.log2(len(result['alphabet']))
        efficiency = result['entropy'] / max_entropy
        language = '—Ä—É—Å—Å–∫–∏–π' if len(result['alphabet']) == 32 else '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'
        
        print(f"{title:<20} {language:<10} {result['entropy']:<10.3f} {efficiency:<15.2%}")

if __name__ == "__main__":
    main()