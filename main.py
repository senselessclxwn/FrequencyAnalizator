import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import math
import os
import sys
import time

# –í–∞–∂–Ω–æ –¥–ª—è exe-—Ñ–∞–π–ª–∞
import matplotlib
matplotlib.use('Agg')  # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º

plt.rcParams['font.size'] = 12
plt.rcParams['font.family'] = 'DejaVu Sans'
sns.set_style("whitegrid")

RUS_ALPHABET = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
ENG_ALPHABET = 'abcdefghijklmnopqrstuvwxyz'

class SimpleTextAnalyzer:
    def clean_text(self, text):
        text = text.lower()
        rus_count = sum(1 for c in text if c in RUS_ALPHABET)
        eng_count = sum(1 for c in text if c in ENG_ALPHABET)
        alphabet = RUS_ALPHABET if rus_count > eng_count else ENG_ALPHABET
        cleaned = ''.join(c for c in text if c in alphabet)
        return cleaned, alphabet
    
    def analyze(self, text):
        text, alphabet = self.clean_text(text)
        n = len(alphabet)
        
        counts = Counter(text)
        total = len(text)
        probs = [counts.get(char, 0) / total for char in alphabet]
        
        bigram_counts = np.zeros((n, n))
        for i in range(len(text)-1):
            idx1 = alphabet.find(text[i])
            idx2 = alphabet.find(text[i+1])
            if idx1 != -1 and idx2 != -1:
                bigram_counts[idx1, idx2] += 1
        
        bigram_total = np.sum(bigram_counts)
        bigram_probs = bigram_counts / bigram_total if bigram_total > 0 else np.zeros((n, n))
        
        entropy = sum(-p * math.log2(p) for p in probs if p > 0)
        
        return {
            'alphabet': alphabet, 'probs': probs, 'bigram_probs': bigram_probs,
            'entropy': entropy, 'length': len(text)
        }

def save_plots(result, title, folder="results"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
    if not os.path.exists(folder):
        os.makedirs(folder)
    
    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —á–∞—Å—Ç–æ—Ç
    plt.figure(figsize=(12, 6))
    colors = plt.cm.viridis(np.linspace(0, 1, len(result['alphabet'])))
    bars = plt.bar(range(len(result['alphabet'])), result['probs'], color=colors)
    
    for i, (bar, char) in enumerate(zip(bars, result['alphabet'])):
        height = bar.get_height()
        if height > 0.001:  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                    f'{char}', ha='center', va='bottom', rotation=45, fontsize=8)
    
    plt.title(f'–ß–∞—Å—Ç–æ—Ç—ã –±—É–∫–≤: {title}\n–≠–Ω—Ç—Ä–æ–ø–∏—è: {result["entropy"]:.2f} –±–∏—Ç/—Å–∏–º–≤–æ–ª')
    plt.xlabel('–ë—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞')
    plt.ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
    plt.tight_layout()
    plt.savefig(f'{folder}/{title}_–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞.png', dpi=150, bbox_inches='tight')
    plt.close()
    
    # 2. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±–∏–≥—Ä–∞–º–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–ª—Ñ–∞–≤–∏—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
    if len(result['alphabet']) <= 32:
        plt.figure(figsize=(10, 8))
        # –£–ø—Ä–æ—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
        xticklabels = list(result['alphabet']) if len(result['alphabet']) <= 20 else False
        yticklabels = list(result['alphabet']) if len(result['alphabet']) <= 20 else False
        
        sns.heatmap(result['bigram_probs'], 
                    xticklabels=xticklabels,
                    yticklabels=yticklabels,
                    cmap='YlOrRd', annot=False)
        plt.title(f'–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±–∏–≥—Ä–∞–º–º: {title}')
        plt.tight_layout()
        plt.savefig(f'{folder}/{title}_–±–∏–≥—Ä–∞–º–º—ã.png', dpi=150, bbox_inches='tight')
        plt.close()
    
    # 3. –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–æ–ø-8 –±—É–∫–≤
    plt.figure(figsize=(8, 6))
    indices = np.argsort(result['probs'])[-8:][::-1]
    top_letters = [result['alphabet'][i] for i in indices]
    top_probs = [result['probs'][i] for i in indices]
    
    plt.pie(top_probs, labels=top_letters, autopct='%1.1f%%', startangle=90)
    plt.title(f'–¢–æ–ø-8 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –±—É–∫–≤: {title}')
    plt.savefig(f'{folder}/{title}_—Ç–æ–ø8.png', dpi=150, bbox_inches='tight')
    plt.close()

def create_report(results, titles, folder="results"):
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    plt.figure(figsize=(12, 8))
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–π
    entropies = [result['entropy'] for result in results]
    max_entropies = [math.log2(len(result['alphabet'])) for result in results]
    
    x = range(len(titles))
    plt.bar(x, entropies, alpha=0.7, label='–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è', color='skyblue')
    plt.bar(x, max_entropies, alpha=0.3, label='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è', color='lightcoral')
    plt.xticks(x, titles, rotation=45, ha='right')
    plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–π —Ç–µ–∫—Å—Ç–æ–≤')
    plt.ylabel('–ë–∏—Ç—ã –Ω–∞ —Å–∏–º–≤–æ–ª')
    plt.legend()
    plt.tight_layout()
    plt.savefig(f'{folder}/—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_—ç–Ω—Ç—Ä–æ–ø–∏–π.png', dpi=150, bbox_inches='tight')
    plt.close()
    
    # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
    html_content = f"""
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
            .header {{ background: #2c3e50; color: white; padding: 20px; text-align: center; }}
            .text-info {{ background: white; padding: 15px; margin: 10px 0; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }}
            .images {{ display: flex; flex-wrap: wrap; justify-content: center; }}
            .image {{ margin: 10px; text-align: center; background: white; padding: 10px; border-radius: 5px; }}
            img {{ max-width: 400px; border: 1px solid #ddd; }}
            h2 {{ color: #2c3e50; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤</h1>
            <p>–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏</p>
        </div>
    """
    
    for i, (title, result) in enumerate(zip(titles, results)):
        efficiency = result['entropy'] / math.log2(len(result['alphabet']))
        html_content += f"""
        <div class='text-info'>
            <h2>üìñ {title}</h2>
            <p><strong>–Ø–∑—ã–∫:</strong> {'—Ä—É—Å—Å–∫–∏–π' if len(result['alphabet']) == 32 else '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'}</p>
            <p><strong>–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:</strong> {result['length']} —Å–∏–º–≤–æ–ª–æ–≤</p>
            <p><strong>–≠–Ω—Ç—Ä–æ–ø–∏—è H(A):</strong> {result['entropy']:.3f} –±–∏—Ç/—Å–∏–º–≤–æ–ª</p>
            <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è:</strong> {math.log2(len(result['alphabet'])):.3f} –±–∏—Ç/—Å–∏–º–≤–æ–ª</p>
            <p><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> <span style="color: {'green' if efficiency > 0.8 else 'orange' if efficiency > 0.6 else 'red'}">{efficiency:.1%}</span></p>
        </div>
        <div class='images'>
            <div class='image'><img src='{title}_–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞.png'><br><strong>–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —á–∞—Å—Ç–æ—Ç</strong></div>
            <div class='image'><img src='{title}_–±–∏–≥—Ä–∞–º–º—ã.png'><br><strong>–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±–∏–≥—Ä–∞–º–º</strong></div>
            <div class='image'><img src='{title}_—Ç–æ–ø8.png'><br><strong>–¢–æ–ø-8 –±—É–∫–≤</strong></div>
        </div>
        <hr>
        """
    
    html_content += """
        <div class='text-info'>
            <h2>üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤</h2>
            <img src='—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_—ç–Ω—Ç—Ä–æ–ø–∏–π.png' style='max-width: 100%;'>
        </div>
    </body>
    </html>
    """
    
    with open(f'{folder}/–æ—Ç—á–µ—Ç.html', 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # –°–æ–∑–¥–∞–µ–º bat-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç—á–µ—Ç–∞
    bat_content = f"""
@echo off
echo –û—Ç–∫—Ä—ã–≤–∞—é –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ...
start –æ—Ç—á–µ—Ç.html
pause
"""
    with open(f'{folder}/–æ—Ç–∫—Ä—ã—Ç—å_–æ—Ç—á–µ—Ç.bat', 'w', encoding='cp866') as f:
        f.write(bat_content)

def main():
    print("=" * 60)
    print("           üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–ö–°–¢–û–í")
    print("=" * 60)
    print("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤
    texts = {
        '–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': '''–í–æ–π–Ω–∞ –∏ –º–∏—Ä - –≤–µ–ª–∏–∫–∏–π —Ä–æ–º–∞–Ω –¢–æ–ª—Å—Ç–æ–≥–æ –æ —Å—É–¥—å–±–∞—Ö –ª—é–¥–µ–π –≤–æ –≤—Ä–µ–º—è –≤–æ–π–Ω—ã —Å –ù–∞–ø–æ–ª–µ–æ–Ω–æ–º. –ì–µ—Ä–æ–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∏—Å–ø—ã—Ç–∞–Ω–∏—è, –ª—é–±–æ–≤—å –∏ –ø–æ—Ç–µ—Ä–∏.''' * 15,
        '–†—É—Å—Å–∫–∞—è –Ω–∞—É–∫–∞': '''–ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ –∏–∑—É—á–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –Ω–∞ –∞—Ç–æ–º–Ω–æ–º —É—Ä–æ–≤–Ω–µ. –í–æ–ª–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—é –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞.''' * 15,
        '–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': '''It was the best of times, it was the worst of times. The story of great expectations and dramatic turns of fate in Victorian England.''' * 15,
        '–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –Ω–∞—É–∫–∞': '''Machine learning algorithms improve through experience. Deep learning uses neural networks to extract patterns from large datasets.''' * 15
    }
    
    analyzer = SimpleTextAnalyzer()
    results = []
    titles = []
    
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤:")
    for title, text in texts.items():
        print(f"   üìñ {title}...")
        result = analyzer.analyze(text)
        results.append(result)
        titles.append(title)
        save_plots(result, title)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    create_report(results, titles)
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results'")
    print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É 'results'")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª '–æ—Ç–∫—Ä—ã—Ç—å_–æ—Ç—á–µ—Ç.bat'")
    print("3. –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ '–æ—Ç—á–µ—Ç.html' –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    time.sleep(10)

if __name__ == "__main__":
    main()